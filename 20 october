// Question 1
// Kth largest element
class Solution {
    public int findKthLargest(int[] nums, int k) {
        PriorityQueue<Integer> pq = new  PriorityQueue<>();

        for(int i = 0; i<k; i++){
            pq.add(nums[i]);
        }

        for(int i = k; i<nums.length; i++){
            if(nums[i]>pq.peek()){
                pq.poll();
                pq.add(nums[i]);
            }
        }
        return pq.poll();
    }
}

// Question 2
// kth smallest element

class Solution {
    public int kthSmallest(int[] arr, int k) {
        // Code here
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        
        for(int i = 0; i<arr.length; i++){
            pq.offer(arr[i]);
        }
        
        int j = 1;
        while(j<=k){
            if(j==k){
                return pq.poll();
            }
            else{
                pq.poll();
                j++;
            }
            
        }
        return -1;
    }
}


// Question 3 
// valid heap tree

class Solution {

    // Count total nodes
    int countNodes(Node root) {
        if (root == null) return 0;
        return 1 + countNodes(root.left) + countNodes(root.right);
    }

    // Check if tree is complete
    boolean isCBT(Node root, int index, int totalNodes) {
        if (root == null) return true;
        if (index >= totalNodes) return false;

        return isCBT(root.left, 2 * index + 1, totalNodes) &&
               isCBT(root.right, 2 * index + 2, totalNodes);
    }

    // Check heap property
    boolean isMaxOrder(Node root) {
        // Leaf node
        if (root.left == null && root.right == null) return true;

        // Only left child
        if (root.right == null)
            return root.data >= root.left.data && isMaxOrder(root.left);

        // Both children
        else
            return (root.data >= root.left.data &&
                    root.data >= root.right.data &&
                    isMaxOrder(root.left) &&
                    isMaxOrder(root.right));
    }

    public boolean isHeap(Node tree) {
        int totalNodes = countNodes(tree);
        return isCBT(tree, 0, totalNodes) && isMaxOrder(tree);
    }
}


// Question 4 


 import java.util.*;

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }

       
        PriorityQueue<Map.Entry<Integer, Integer>> pq =
                new PriorityQueue<>((a, b) -> b.getValue() - a.getValue());

        pq.addAll(freqMap.entrySet());

    
        int[] result = new int[k];
        for (int i = 0; i < k; i++) {
            result[i] = pq.poll().getKey();
        }

        return result;
    }
}


// Question 5

// sliding window

 import java.util.*;

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums == null || nums.length == 0) return new int[0];
        
        int n = nums.length;
        int[] result = new int[n - k + 1];
        Deque<Integer> dq = new LinkedList<>();

        for (int i = 0; i < n; i++) {

             
            if (!dq.isEmpty() && dq.peekFirst() <= i - k) {
                dq.pollFirst();
            }

             
            while (!dq.isEmpty() && nums[dq.peekLast()] < nums[i]) {
                dq.pollLast();
            }

             
            dq.offerLast(i);

             
            if (i >= k - 1) {
                result[i - k + 1] = nums[dq.peekFirst()];
            }
        }

        return result;
    }
}


// Question 6 

class Solution {
    public int helper(TreeNode root) {
        if (root == null) return 0;

        int sum = 0;

        // check if left child is a leaf
        if (root.left != null && root.left.left == null && root.left.right == null) {
            sum += root.left.val;
        }

        // recurse for left and right subtrees
        sum += helper(root.left);
        sum += helper(root.right);

        return sum;
    }

    public int sumOfLeftLeaves(TreeNode root) {
        return helper(root);
    }
}


