// date 17/10/2025
// Question 2

class Solution {
    int upperBound(int[] arr, int target) {
        // code here
        for(int i = 0; i<arr.length ; i++){
            if(arr[i]>target){
                return i;
            }
        }
        return arr.length;
    }
}

// Question 2

class Solution {
     
    int lowerBound(int[] arr, int target) {
        // code here
        
        int ans = arr.length;
        for(int i = 0; i<arr.length; i++){
            if(target == arr[i] || target<arr[i]){
                ans  = i;
                break;
            }
        }
        
        return ans;
    }
}

Question 3 koko eating bananas

class Solution {
    public int check(int[] piles, int k) {
        int count = 0;
        for (int pile : piles) {
            count += (int)Math.ceil((double)pile / k);
        }
        return count;
    }

    public int minEatingSpeed(int[] piles, int h) {
        int lp = 1;
        int rp = Arrays.stream(piles).max().getAsInt();
        int ans = rp;

        while (lp <= rp) {
            int mid = lp + (rp - lp) / 2;
            int ch = check(piles, mid);

            if (ch <= h) {
                ans = mid;
                rp = mid - 1;
            } else {
                lp = mid + 1;
            }
        }

        return ans;
    }
}

// Question 4  Binary search in Rotated array

 class Solution {
    public int search(int[] nums, int target) {
        int l = 0; 
        int r = nums.length - 1;

        while (l <= r) {
            int mid = l + (r - l) / 2;

            if (nums[mid] == target) {
                return mid;
            }

            if (nums[l] <= nums[mid]) {
                if (target >= nums[l] && target < nums[mid]) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
             
            else {
                if (target > nums[mid] && target <= nums[r]) {
                    l = mid + 1;
                } else {
                    r = mid - 1;
                }
            }
        }

        return -1;  
    }
}


